#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}




http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_x_forwarded_for" "$http_x_cache_status"';

    access_log  logs/access.log  main;
    proxy_cache_path /tmp/cache levels=1:2 keys_zone=cache_zone:10m inactive=60m max_size=100m;
    lua_code_cache off;
    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    server {
        listen       8080;
        server_name  _;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        proxy_cache cache_zone;
        location = /wikipedia/commons/thumb/b/bd/Test.svg/1200px-Test.svg.png {
                proxy_pass https://upload.wikimedia.org;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_cache_bypass $http_upgrade;
                add_header X-Cache-Status $upstream_cache_status always;
                add_header X-Forwarded-Proto $scheme always;
                proxy_ignore_headers "Cache-Control" "Expires" "X-Accel-Expires" "X-Accel-Redirect" "Set-Cookie";
                proxy_buffering on;
                proxy_cache cache_zone;
                proxy_cache_background_update on;
                proxy_cache_convert_head on;
                proxy_cache_key "$scheme://$host$request_uri$is_args$args";
                proxy_cache_lock on;
                proxy_cache_lock_age 30s;
                proxy_cache_lock_timeout 30s;
                proxy_cache_methods GET HEAD;
                proxy_cache_min_uses 1;
                proxy_cache_revalidate on;
                proxy_cache_use_stale error timeout updating http_500 http_502 http_503 http_504;
                proxy_cache_valid 200 206 301 120m;
                proxy_cache_valid 302 303 20m;
                proxy_cache_valid 404 410 3m;
                proxy_http_version 1.1;
                proxy_next_upstream error timeout invalid_header http_502 http_503 http_504;
                proxy_next_upstream_tries 2;
                proxy_pass_request_headers on;
                proxy_read_timeout 100s;
                proxy_send_timeout 30s;
                proxy_set_header Host upload.wikimedia.org;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_ssl_name upload.wikimedia.org;
                proxy_ssl_protocols TLSv1.2 TLSv1.3;
                proxy_ssl_server_name on;
                proxy_ssl_session_reuse on;
                proxy_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
                proxy_ssl_verify on;
                proxy_ssl_verify_depth 3;
        }

        location /cache/purge {
            content_by_lua_block {
                local cache_multipurge = require("resty.cache_multipurge")
                local ok, err = cache_multipurge.init({
                    cache_paths = {"/tmp/cache"},
                    cache_keyfinder = "cache_keyfinder"
                })
                if not ok then
                    ngx.log(ngx.ERR, "Failed to initialize cache_multipurge: ", err)
                    ngx.exit(500)
                end
                local cache_key = ngx.var.arg_url
                if not cache_key then
                    ngx.status = 400
                    ngx.say("url parameter is required")
                    ngx.exit(400)
                end
                local cache_purge_type = ngx.var.arg_type or nil
                local ok, err = cache_multipurge.purge_cache(cache_key, cache_purge_type)
                if not ok then
                    ngx.log(ngx.ERR, "Failed to purge cache: ", err)
                    ngx.exit(500)
                end
                ngx.say("Cache purged successfully")
            }
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
